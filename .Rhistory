## Return a matrix that is the inverse of 'x'
}
}
cacheSolve <- function(x, ...) {
inv <- x$getInverse()
if(!is.null(inv)){
message("get cashed data")
return(inv)
}
mtrx <- x$get()
inv<- solve(mtrx,...)
x$setInverse(inv)
inv       ## Return a matrix that is the inverse of 'x'
}
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x<<-y
inv<<-NULL
}
get <- function() x
setInverse <- function(inverse){
inv<<-inverse
}
getInverse <- function() inv
list(set=set, get=get, setInverse = setInverse, getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getInverse()
if(!is.null(inv)){
message("get cashed data")
return(inv)
}
mtrx <- x$get()
inv<- solve(mtrx,...)
x$setInverse(inv)
inv       ## Return a matrix that is the inverse of 'x'
}
